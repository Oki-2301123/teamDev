
    preg_match('/^[\w\.\-]+@[a-zA-Z0-9\.\-]+\.[a-zA-Z]{2,}$/', $mail)

    ^: 先頭

    [\w\.\-]: 英数字(\w)、ピリオド(.)、ハイフン(-)のいずれかを1文字以上

        （w自体は単なるアルファベットとして解釈され、特別な意味はないが、
        \w は「Word character（単語構成文字）」を表し、
        英数字（a-z、A-Z、0-9）とアンダースコア（_）に対応する。
        他の文字クラスも同様に、
        \dは数字（0-9）に対応する。
        \sは空白文字に対応する。

    @: @が含まれていることを確認。

    [a-zA-Z0-9\.\-]+: @の後に英数字、ピリオド、ハイフンが1文字以上

    \.: ドメインの区切りのためのピリオド。

        \. におけるバックスラッシュ（\）は、
        ピリオド（.）を特別な意味を持たない「ただのピリオド」として解釈させるために必要。
        正規表現では、.は「任意の1文字」を意味するメタ文字であるため、
        そのまま使用するとどんな文字にもマッチしてしまう。
        ドメインの区切り文字として「ピリオドそのもの」を指定する場合には、
        .の前にバックスラッシュを付けて \.と書き、
        「リテラルのピリオド」を意味するようにする。
        つまり、 \.は「ピリオドという文字そのもの」に一致させるための書き方
    
    [a-zA-Z]{2,}$: 末尾が2文字以上のアルファベット
        {2,}は２回以上を示す。
        {2,5}にすると２回以上５回以下の範囲指定にすることが出来る。
    
    まとめ
    ↓
    メタ文字-----------------------------------------------------

    メタ文字	意味
        .	    任意の1文字
        *	    直前の文字が0回以上
        +	    直前の文字が1回以上
        ?	    直前の文字が0回か1回
        ^	    行の先頭
        $	    行の末尾
        \	    エスケープ（次の文字をリテラルとして扱う）
    
    文字クラス-----------------------------------------------------  

    [aeiou]     # a、e、i、o、u のいずれかにマッチ
    [a-z]       # 小文字のアルファベットにマッチ
    [A-Za-z]    # 大文字・小文字のアルファベットにマッチ
        
    \d は数字（[0-9]）にマッチ
    \w は「単語構成文字」（英数字およびアンダースコア）にマッチ
    \s は空白文字にマッチ

     繰り返しの指定-----------------------------------------------------

    {n} は正確に n 回
    {n,} は n 回以上
    {n,m} は n 回以上 m 回以下   
    
    a{3}     # 文字 "a" が3回連続
    [0-9]{2,4} # 数字が2回から4回

    アンカー-----------------------------------------------------
    
    ^ は文字列の先頭を表す。
    $ は文字列の末尾を表す。

    ^hello     # "hello"で始まる文字列
    world$     # "world"で終わる文字列
    ^\d{3}$    # 3桁の数字のみの行

    グループ化とキャプチャ-----------------------------------------------------
    
    グループは、() で囲むことでその中をひとまとめにして扱える。
    グループ化した部分を繰り返し指定したり、キャプチャして後で再利用したりできる。
    
    (abc){2}    # "abc" が2回繰り返される
    (hello|world) # "hello" または "world" にマッチ

    否定-----------------------------------------------------
    
    否定文字クラス：[^] の形式で、指定された文字以外にマッチする。
    
    [^a-z]     # 小文字アルファベット以外の任意の1文字
    [^0-9]     # 数字以外の任意の1文字
    